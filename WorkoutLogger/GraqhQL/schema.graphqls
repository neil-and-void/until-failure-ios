### TYPES ###
scalar Time

type PageInfo {
  hasNextPage: Boolean!
}

type User {
  id: ID!
  name: String!
  email: String!
}

type WorkoutRoutineConnection {
  edges: [WorkoutRoutineEdge!]!
  pageInfo: PageInfo!
}

type WorkoutRoutineEdge {
  node: WorkoutRoutine!
  cursor: ID!
}

type WorkoutRoutine {
  id: ID!
  name: String!
  active: Boolean!
  exerciseRoutines: [ExerciseRoutine!]!
}

type ExerciseRoutine {
  id: ID!
  active: Boolean!
  name: String!
  sets: Int!
  reps: Int!
}

type WorkoutSessionConnection {
  edges: [WorkoutSessionEdge!]!
  pageInfo: PageInfo!
}

type WorkoutSessionEdge {
  node: WorkoutSession!
  cursor: ID!
}

type WorkoutSession {
  id: ID!
  start: Time!
  end: Time
  workoutRoutine: WorkoutRoutine!
  exercises: [Exercise!]!
  prevExercises: [Exercise!]!
}

type Exercise {
  id: ID!
  exerciseRoutine: ExerciseRoutine!
  sets: [SetEntry!]!
  notes: String!
}

type SetEntry {
  id: ID!
  weight: Float!
  reps: Int!
}

type AuthResult {
  refreshToken: String!
  accessToken: String!
}

type RefreshSuccess {
  accessToken: String!
}

### END TYPES ###

### INPUTS ###

input LoginInput {
  email: String!
  password: String!
}

input SignupInput {
  email: String!
  name: String!
  password: String!
  confirmPassword: String!
}

input WorkoutRoutineInput {
  name: String!
  exerciseRoutines: [ExerciseRoutineInput!]!
}

input UpdateWorkoutRoutineInput {
  id: ID!
  name: String!
  exerciseRoutines: [UpdateExerciseRoutineInput!]!
}

input UpdateExerciseRoutineInput {
  id: ID
  name: String!
  sets: Int!
  reps: Int!
}

input ExerciseRoutineInput {
  name: String!
  sets: Int!
  reps: Int!
}

input WorkoutSessionInput {
  workoutRoutineId: ID!
  start: Time!
  end: Time
  exercises: [ExerciseInput!]!
}

input UpdateWorkoutSessionInput {
  start: Time
  end: Time
}

input ExerciseInput {
  exerciseRoutineId: ID!
  notes: String!
  setEntries: [SetEntryInput!]!
}

input UpdateExerciseInput {
  notes: String!
}

input SetEntryInput {
  weight: Float!
  reps: Int!
}

input UpdateSetEntryInput {
  weight: Float
  reps: Int
}

### END INPUTS ###

type Query {
  user: User!
  workoutRoutines(limit: Int!, after: String): WorkoutRoutineConnection!
  workoutRoutine(workoutRoutineId: ID!): WorkoutRoutine!
  exerciseRoutines(workoutRoutineId: ID!): [ExerciseRoutine!]!
  workoutSessions(limit: Int!, after: String): WorkoutSessionConnection!
  workoutSession(workoutSessionId: ID!): WorkoutSession!
  exercise(exerciseId: ID!): Exercise!
  sets(exerciseId: ID!): [SetEntry!]!
}

type Mutation {
  deleteUser: Int!

  login(loginInput: LoginInput!): AuthResult!
  signup(signupInput: SignupInput!): AuthResult!
  refreshAccessToken(refreshToken: String!): RefreshSuccess!

  createWorkoutRoutine(routine: WorkoutRoutineInput!): WorkoutRoutine!
  updateWorkoutRoutine(
    workoutRoutine: UpdateWorkoutRoutineInput!
  ): WorkoutRoutine!
  deleteWorkoutRoutine(workoutRoutineId: ID!): Int!

  addExerciseRoutine(
    workoutRoutineId: ID!
    exerciseRoutine: ExerciseRoutineInput!
  ): ExerciseRoutine!
  deleteExerciseRoutine(exerciseRoutineId: ID!): Int!

  addWorkoutSession(workout: WorkoutSessionInput!): WorkoutSession!
  updateWorkoutSession(
    workoutSessionId: ID!
    updateWorkoutSessionInput: UpdateWorkoutSessionInput!
  ): WorkoutSession!
  deleteWorkoutSession(workoutSessionId: ID!): Int!

  # addImpromptuExercise(workoutSession, exerciseRoutine:{sets, reps, name, workoutRoutineId}) for later
  addExercise(workoutSessionId: ID!, exercise: ExerciseInput!): Exercise!
  updateExercise(exerciseId: ID!, exercise: UpdateExerciseInput!): Exercise!
  deleteExercise(exerciseId: ID!): Int!

  addSet(exerciseId: ID!, set: SetEntryInput!): SetEntry!
  updateSet(setId: ID!, set: UpdateSetEntryInput!): SetEntry!
  deleteSet(setId: ID!): Int!
}
